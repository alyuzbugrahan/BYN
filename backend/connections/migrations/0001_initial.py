# Generated by Django 4.2.7 on 2025-06-11 19:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='NetworkMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection_count', models.IntegerField(default=0)),
                ('follower_count', models.IntegerField(default=0)),
                ('following_count', models.IntegerField(default=0)),
                ('mutual_connection_count', models.IntegerField(default=0)),
                ('industry_connection_percentage', models.FloatField(default=0.0)),
                ('profile_views_count', models.IntegerField(default=0)),
                ('search_appearances_count', models.IntegerField(default=0)),
                ('post_engagement_rate', models.FloatField(default=0.0)),
                ('avg_connections_per_month', models.FloatField(default=0.0)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='network_metrics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'network_metrics',
            },
        ),
        migrations.CreateModel(
            name='ConnectionRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('withdrawn', 'Withdrawn')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_connection_requests', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_connection_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'connection_requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_count', models.IntegerField(default=0)),
                ('last_interaction', models.DateTimeField(blank=True, null=True)),
                ('connected_at', models.DateTimeField(auto_now_add=True)),
                ('connection_request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='connection', to='connections.connectionrequest')),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections_as_user1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections_as_user2', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'connections',
                'ordering': ['-connected_at'],
            },
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('blocked', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_by_users', to=settings.AUTH_USER_MODEL)),
                ('blocker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'blocks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('mutual_connections', 'Mutual Connections'), ('same_company', 'Same Company'), ('same_school', 'Same School'), ('similar_skills', 'Similar Skills'), ('location_based', 'Location Based'), ('industry_based', 'Industry Based'), ('email_contact', 'Email Contact')], max_length=30)),
                ('score', models.FloatField(default=0.0)),
                ('is_dismissed', models.BooleanField(default=False)),
                ('is_viewed', models.BooleanField(default=False)),
                ('viewed_at', models.DateTimeField(blank=True, null=True)),
                ('dismissed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recommended_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommended_to', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_recommendations',
                'ordering': ['-score', '-created_at'],
                'indexes': [models.Index(fields=['user', 'is_dismissed', 'score'], name='user_recomm_user_id_ba5773_idx'), models.Index(fields=['recommendation_type', 'score'], name='user_recomm_recomme_20b607_idx')],
                'unique_together': {('user', 'recommended_user')},
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'follows',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['follower', 'created_at'], name='follows_followe_23aafd_idx'), models.Index(fields=['following', 'created_at'], name='follows_followi_29b9dd_idx')],
                'unique_together': {('follower', 'following')},
            },
        ),
        migrations.AddIndex(
            model_name='connectionrequest',
            index=models.Index(fields=['receiver', 'status', 'created_at'], name='connection__receive_5b6965_idx'),
        ),
        migrations.AddIndex(
            model_name='connectionrequest',
            index=models.Index(fields=['sender', 'status'], name='connection__sender__6f537e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='connectionrequest',
            unique_together={('sender', 'receiver')},
        ),
        migrations.AddIndex(
            model_name='connection',
            index=models.Index(fields=['user1', 'connected_at'], name='connections_user1_i_d160fb_idx'),
        ),
        migrations.AddIndex(
            model_name='connection',
            index=models.Index(fields=['user2', 'connected_at'], name='connections_user2_i_9a58d9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='connection',
            unique_together={('user1', 'user2')},
        ),
        migrations.AlterUniqueTogether(
            name='block',
            unique_together={('blocker', 'blocked')},
        ),
    ]
